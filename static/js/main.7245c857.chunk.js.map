{"version":3,"sources":["JokeCategory.js","Jokes.js","App.js","reportWebVitals.js","index.js"],"names":["JokeCategories","props","useState","categories","setCategories","useEffect","fetch","then","response","json","className","htmlFor","id","onChange","e","setCategory","target","value","map","category","index","Joke","React","joke","setJoke","jokeResponse","App","selectCategory","setSelectedCategory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAkCeA,EAhCQ,SAACC,GAAU,IAAD,EACMC,mBAAS,IADf,mBACtBC,EADsB,KACVC,EADU,KAW7B,OARAC,qBAAU,WAENC,MAAM,+CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAJ,GAAU,OAAIC,EAAcD,QAGxC,IACEA,EAIA,qCACA,oBAAIO,UAAU,SAAd,qCACA,qBAAKA,UAAU,YAAf,SACA,sBAAKA,UAAU,yBAAf,UACA,uBAAOA,UAAU,UAAUC,QAAQ,SAAnC,+BACA,yBAAQC,GAAG,SAASF,UAAU,eAAeG,SAAU,SAACC,GAAD,OAAKb,EAAMc,YAAYD,EAAEE,OAAOC,QAAvF,UACA,8DACCd,EAAWe,KAAI,SAACC,EAAUC,GAAX,OAChB,iCAAqBD,GAARC,iBAXN,4CCGAC,G,MAdF,SAACpB,GAAS,IAAD,EACKqB,IAAMpB,WADX,mBACXqB,EADW,KACNC,EADM,KASlB,OANAF,IAAMjB,WAAU,WACZC,MAAM,oDAAD,OAAqDL,EAAMkB,WAC/DZ,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAkB,GAAY,OAAGD,EAAQC,QAC9B,CAACxB,EAAMkB,WAENI,EAGG,4BAAIA,EAAKN,QAFL,2DCEAS,MAVf,WAAgB,IAAD,EACgCxB,mBAAS,IADzC,mBACNyB,EADM,KACUC,EADV,KAEb,OACE,sBAAKlB,UAAU,MAAf,UACE,cAAC,EAAD,CAAgBK,YAAaa,IAC7B,cAAC,EAAD,CAAMT,SAAUQ,QCEPE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7245c857.chunk.js","sourcesContent":["import React,{ useState, useEffect } from 'react';\r\n\r\nconst JokeCategories = (props) =>{\r\n    const [categories, setCategories]= useState([])\r\n\r\n    useEffect(() => {\r\n        // GET request using fetch inside useEffect React hook\r\n        fetch('https://api.chucknorris.io/jokes/categories')\r\n            .then(response => response.json())\r\n            .then(categories => setCategories(categories));\r\n    \r\n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\r\n    },[]);\r\n    if(!categories){\r\n        return <p>Loading...</p>\r\n    }\r\n    return (\r\n        <>\r\n        <h1 className=\"Header\">Chuck Norries Jokes API</h1>\r\n        <div className=\"container\">\r\n        <div className=\"form-group text-center\">\r\n        <label className=\"label-m\" htmlFor=\"chuckN\">Select A Category</label>\r\n        <select id=\"chuckN\" className=\"form-control\" onChange={(e)=>props.setCategory(e.target.value)}>\r\n        <option>Please Select A Category</option>\r\n        {categories.map((category, index) => \r\n        <option key={index}>{category}</option>)\r\n        }    \r\n    </select>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default JokeCategories;","import React from 'react'\r\n\r\n\r\nconst Joke = (props)=>{\r\n    const [joke,setJoke] = React.useState()\r\n\r\n    React.useEffect(() => {\r\n        fetch(`https://api.chucknorris.io/jokes/random?category=${props.category}`)\r\n        .then(response=>response.json())\r\n        .then(jokeResponse=> setJoke(jokeResponse))\r\n    }, [props.category])\r\n\r\n    if(!joke){\r\n        return <p>Please Select A Category</p>\r\n    }\r\n    return <p>{joke.value}</p>}\r\n\r\nexport default Joke;","import JokeCategories from \"./JokeCategory\"\nimport './App.css';\nimport React,{ useState, useEffect } from 'react';\nimport Joke from \"./Jokes\";\n\nfunction App() {\n  const [selectCategory, setSelectedCategory]= useState([])\n  return (\n    <div className=\"App\">\n      <JokeCategories setCategory={setSelectedCategory}/>\n      <Joke category={selectCategory}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}